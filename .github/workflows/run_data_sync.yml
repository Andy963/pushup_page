name: Run Data Sync

on:
  workflow_dispatch:
  schedule:
    - cron: '0 0 * * *'
  push:
    branches:
      - master
    paths:
      - pushup_page/strava_sync.py
      - pushup_page/gen_svg.py
      - requirements.txt

env:
  RUN_TYPE: strava
  ATHLETE: pushup_user
  TITLE: Pushup Strava Sync
  MIN_GRID_DISTANCE: 10
  TITLE_GRID: Pushup Grid
  SAVE_DATA_IN_GITHUB_CACHE: false
  DATA_CACHE_PREFIX: 'pushup_data'
  BUILD_GH_PAGES: true
  GENERATE_MONTH_OF_LIFE: false

jobs:
  sync:
    name: Sync
    runs-on: ubuntu-latest
    outputs:
      SAVE_DATA_IN_GITHUB_CACHE: ${{ steps.set_output.outputs.SAVE_DATA_IN_GITHUB_CACHE }}
      DATA_CACHE_PREFIX: ${{ steps.set_output.outputs.DATA_CACHE_PREFIX }}
      BUILD_GH_PAGES: ${{ steps.set_output.outputs.BUILD_GH_PAGES }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          persist-credentials: true

      - name: Set up Python
        id: setup_python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: pip
          cache-dependency-path: 'requirements.txt'

      - name: Install dependencies
        run: |
          pip install -r requirements.txt

      - name: Cache Data Files
        if: env.SAVE_DATA_IN_GITHUB_CACHE == 'true'
        uses: actions/cache@v4
        with:
            path: |
              activities
              assets
              pushup_page/data.db
              imported.json
          key: ${{ env.DATA_CACHE_PREFIX }}-${{ github.sha }}-${{ github.run_id }}
          restore-keys: |
            ${{ env.DATA_CACHE_PREFIX }}-${{ github.sha }}-
            ${{ env.DATA_CACHE_PREFIX }}-

      - name: Run sync Strava script
        run: |
          python pushup_page/strava_sync.py ${{ secrets.STRAVA_CLIENT_ID }} ${{ secrets.STRAVA_CLIENT_SECRET }} ${{ secrets.STRAVA_CLIENT_REFRESH_TOKEN }}

      - name: Make svg GitHub profile
        env:
          TITLE: ${{ env.TITLE }}
          TITLE_GRID: ${{ env.TITLE_GRID }}
          ATHLETE: ${{ env.ATHLETE }}
        run: |
          python pushup_page/gen_svg.py --from-db --title "$TITLE" --type github --github-style "align-firstday" --athlete "$ATHLETE" --output assets/pushup_github.svg --use-localtime
          python pushup_page/gen_svg.py --from-db --title "$TITLE_GRID" --type grid --athlete "$ATHLETE" --output assets/pushup_grid.svg --use-localtime
  # Month of life generation removed

      - name: Save data to parqent
        if: env.SAVE_TO_PARQENT == 'true'
        run: |
          pip install duckdb==1.1.0
          python run_page/save_to_parqent.py

      - name: Push new runs
        if: env.SAVE_DATA_IN_GITHUB_CACHE != 'true'
        run: |
          git config --local user.email 'action@github.com'
          git config --local user.name 'GitHub Action'
          git add .
          git commit -m 'update new runs' || echo 'nothing to commit'
          git push || echo 'nothing to push'

      - name: Set Output
        id: set_output
        env:
          SAVE_DATA_IN_GITHUB_CACHE: ${{ env.SAVE_DATA_IN_GITHUB_CACHE }}
          DATA_CACHE_PREFIX: ${{ env.DATA_CACHE_PREFIX }}
          BUILD_GH_PAGES: ${{ env.BUILD_GH_PAGES }}
        run: |
          echo "SAVE_DATA_IN_GITHUB_CACHE=$SAVE_DATA_IN_GITHUB_CACHE" >> "$GITHUB_OUTPUT"
          echo "DATA_CACHE_PREFIX=$DATA_CACHE_PREFIX" >> "$GITHUB_OUTPUT"
          echo "BUILD_GH_PAGES=$BUILD_GH_PAGES" >> "$GITHUB_OUTPUT"

  publish_github_pages:
    if: needs.sync.result == 'success' && needs.sync.outputs.BUILD_GH_PAGES == 'true'
    name: Build and publish Github Pages
    uses: ./.github/workflows/gh-pages.yml
    with:
      save_data_in_github_cache: ${{needs.sync.outputs.SAVE_DATA_IN_GITHUB_CACHE == 'true'}}
      data_cache_prefix: ${{needs.sync.outputs.DATA_CACHE_PREFIX}}
    needs:
      - sync
